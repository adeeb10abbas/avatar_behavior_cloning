# Reference: https://diffusion-policy.cs.columbia.edu/data/experiments/image/tool_hang_ph/diffusion_policy_cnn/config.yaml
_target_: diffusion_policy.workspace.train_diffusion_unet_image_workspace.TrainDiffusionUnetImageWorkspace
name: train_diffusion_unet_hybrid
exp_name: diffusion_ddim
task_name: ${task.name}
action_dim: 24
horizon: 16
n_obs_steps: 2 
dataset_obs_steps: ${n_obs_steps}
n_action_steps: 8
n_latency_steps: 0
obs_as_global_cond: true
past_action_visible: false
pred_action_steps_only: false
abs_action: true
keypoint_visible_rate: 1.0

image_shape: &image_shape [3, 480, 640]
shape_meta: &shape_meta
  # acceptable types: rgb, low_dim
  obs:
    usb_cam_right:
      shape: *image_shape
      type: rgb
    usb_cam_left:
      shape: *image_shape
      type: rgb
    usb_cam_table:
      shape: *image_shape
      type: rgb
    left_arm_pose:
      shape: [9] # left robot EE pose
      type: low_dim
    right_arm_pose:
      shape: [9] # right robot EE pose
      type: low_dim
    rdda_right_obs:
      shape: [3] # pos_tensor
      type: low_dim
    rdda_left_obs:
      shape: [3] # pos_tensor
      type: low_dim
  action:
    shape: [24]
    # addition here - rdda_right_act (3)[pos] + right_arm_ee_pose(9) + rdda_left_act(3) [pos] + left_operator_ee_pose(9) 

task:
  name: haptic_image_teacher_aware
  task_name: bottle_pick
  dataset_path: /home/ali/shared_volume/bottle_pick/teacher_aware/_replay_buffer.zarr
  dataset_type: ph
  abs_action: ${abs_action}
  shape_meta: ${shape_meta}
  dataset:
    _target_: diffusion_policy.dataset.haptics_dataset.AvatarHapticsImageDataset
    dataset_path: ${task.dataset_path}
    shape_meta: ${shape_meta}
    horizon: ${horizon}
    n_obs_steps: ${n_obs_steps}
    pad_after: ${eval:'${n_action_steps}-1'}
    pad_before: ${eval:'${n_obs_steps}-1+${n_latency_steps}'}
    # abs_action: ${abs_action}
    # rotation_rep: rotation_6d
    seed: 42
    val_ratio: 0.02
    # include_gripper_action: false

policy:
  _target_: diffusion_policy.policy.diffusion_unet_image_policy.DiffusionUnetImagePolicy

  shape_meta: ${shape_meta}
  
  noise_scheduler:
    _target_: diffusers.schedulers.scheduling_ddim.DDIMScheduler
    num_train_timesteps: 100
    beta_start: 0.0001
    beta_end: 0.02
    # beta_schedule is important
    # this is the best we found
    beta_schedule: squaredcos_cap_v2
    clip_sample: True
    set_alpha_to_one: True
    steps_offset: 0
    prediction_type: epsilon # or sample

  obs_encoder:
    _target_: diffusion_policy.model.vision.multi_image_obs_encoder.MultiImageObsEncoder
    shape_meta: ${shape_meta}
    rgb_model:
      _target_: diffusion_policy.model.vision.model_getter.get_resnet
      name: resnet18
      weights: IMAGENET1K_V1
    resize_shape: [240, 320]
    crop_shape: [216, 288] # ch, cw 240x320 90%
    random_crop: True
    use_group_norm: True
    share_rgb_model: False
    imagenet_norm: True

  horizon: ${horizon}
  n_action_steps: ${eval:'${n_action_steps}+${n_latency_steps}'}
  n_obs_steps: ${n_obs_steps}
  num_inference_steps: 100
  obs_as_global_cond: ${obs_as_global_cond}
  # crop_shape: null
  diffusion_step_embed_dim: 128
  down_dims: [512, 1024, 2048]
  kernel_size: 5
  n_groups: 8
  cond_predict_scale: True

  # scheduler.step params
  # predict_epsilon: True

ema:
  _target_: diffusion_policy.model.diffusion.ema_model.EMAModel
  update_after_step: 0
  inv_gamma: 1.0
  power: 0.75
  min_value: 0.0
  max_value: 0.9999

dataloader:
  batch_size: 56
  num_workers: 14
  shuffle: False
  pin_memory: False
  persistent_workers: True

val_dataloader:
  batch_size: 36
  num_workers: 14
  shuffle: False
  pin_memory: False
  persistent_workers: True

optimizer:
  _target_: torch.optim.AdamW
  lr: 1.0e-4
  betas: [0.95, 0.999]
  eps: 1.0e-8
  weight_decay: 1.0e-6

training:
  device: "cuda:0"
  seed: 42
  debug: False
  resume: True
  # optimization
  lr_scheduler: cosine
  lr_warmup_steps: 500
  num_epochs: 4000
  gradient_accumulate_every: 1
  # EMA destroys performance when used with BatchNorm
  # replace BatchNorm with GroupNorm.
  use_ema: True
  freeze_encoder: False
  # training loop control
  # in epochs
  rollout_every: 5
  checkpoint_every: 50
  val_every: 1
  sample_every: 1
  # steps per epoch
  max_train_steps: null
  max_val_steps: null
  # misc
  tqdm_interval_sec: 1.0

logging:
  project: diffusion_policy_debug
  resume: True
  mode: online
  name: ${now:%Y.%m.%d-%H.%M.%S}_${name}_${task_name}
  tags: ["${name}", "${task_name}", "${exp_name}"]
  id: null
  group: null

checkpoint:
  topk:
    monitor_key: train_loss
    mode: min
    k: 5
    format_str: 'epoch={epoch:04d}-train_loss={train_loss:.3f}.ckpt'
  save_last_ckpt: True
  save_last_snapshot: False

multi_run:
  run_dir: data/outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}
  wandb_name_base: ${now:%Y.%m.%d-%H.%M.%S}_${name}_${task_name}

hydra:
  job:
    override_dirname: ${name}
  run:
    dir: data/outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}
  sweep:
    dir: data/outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}
    subdir: ${hydra.job.num}
